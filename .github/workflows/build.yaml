name: build
on: [push, pull_request]

jobs:
  test:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - run: deno task test --coverage=.cov --junit-path=.test-report.xml
    - uses: EnricoMi/publish-unit-test-result-action@v2
      if: runner.os == 'Linux' && always()
      with:
        check_name: "Test Results (Linux)"
        files: .test-report.xml
    - uses: EnricoMi/publish-unit-test-result-action/macos@v2
      if: runner.os == 'macOS' && always()
      with:
        check_name: "Test Results (macOS)"
        files: .test-report.xml
    - uses: EnricoMi/publish-unit-test-result-action/windows@v2
      if: runner.os == 'Windows' && always()
      with:
        check_name: "Test Results (Windows)"
        files: .test-report.xml
    - run: deno coverage --lcov .cov > .cov.lcov
    - uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: .cov.lcov

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - run: deno task check
    - run: deno task check
      working-directory: ${{ github.workspace }}/examples/blog/

  release-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - run: deno task publish --dry-run
    - run: deno task dnt
    - run: npm publish --dry-run
      working-directory: ${{ github.workspace }}/npm/

  publish:
    needs: [test, lint, release-test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      discussions: write
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - if: github.ref_type == 'branch'
      run: |
        jq \
          --arg build "$GITHUB_RUN_NUMBER" \
          --arg commit "${GITHUB_SHA::8}" \
          '.version = .version + "-dev." + $build + "+" + $commit' \
          deno.json > deno.json.tmp
        mv deno.json.tmp deno.json
    - if: github.ref_type == 'tag'
      run: |
        set -ex
        [[ "$(jq -r .version deno.json)" = "$GITHUB_REF_NAME" ]]
        ! grep -i "to be released" CHANGES.md
    # Don't know why, but the .gitignore list is not overriden by include list
    # in deno.json:
    - run: rm vocab/.gitignore
    - run: 'deno task dnt "$(jq -r .version deno.json)"'
    - run: npm pack
      working-directory: ${{ github.workspace }}/npm/
    - id: extract-changelog
      uses: dahlia/submark@5a5ff0a58382fb812616a5801402f5aef00f90ce
      with:
        input-file: CHANGES.md
        heading-level: 2
        heading-title-text: version ${{ github.ref_name }}
        ignore-case: true
        omit-heading: true
    - run: 'cat "$CHANGES_FILE"'
      env:
        CHANGES_FILE: ${{ steps.extract-changelog.outputs.output-file }}
    - if: github.event_name == 'push' && github.ref_type == 'tag'
      uses: softprops/action-gh-release@v1
      with:
        body_path: ${{ steps.extract-changelog.outputs.output-file }}
        name: Fedify ${{ github.ref_name }}
        files: npm/*.tgz
        generate_release_notes: false
        discussion_category_name: Announcements
    - if: github.event_name == 'push'
      run: deno task publish --allow-dirty
    - if: github.event_name == 'push'
      run: |
        set -ex
        npm config set //registry.npmjs.org/:_authToken "$NPM_AUTH_TOKEN"
        if [[ "$GITHUB_REF_TYPE" = "tag" ]]; then
          npm publish --provenance --access public *.tgz
        else
          npm publish --provenance --access public --tag dev *.tgz
        fi
      env:
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      working-directory: ${{ github.workspace }}/npm/

  publish-examples-blog:
    if: github.event_name == 'push'
    needs: [test, lint]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - run: deno task codegen
    - uses: denoland/deployctl@v1
      with:
        project: fedify-blog
        entrypoint: ./examples/blog/main.ts
        root: .

  publish-docs:
    needs: [publish]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pages: write
      deployments: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - if: github.event_name == 'push' && github.ref_type == 'tag'
      run: |
        jq \
          --arg url "$UNSTABLE_DOCS_URL" \
          '.nav_links = [{"title":"Go to unstable","url":$url}] + .nav_links' \
          _data.json > _data.json.tmp
        mv _data.json.tmp _data.json
      env:
        UNSTABLE_DOCS_URL: ${{ vars.UNSTABLE_DOCS_URL }}
      working-directory: ${{ github.workspace }}/docs/
    - if: github.event_name != 'push' || github.ref_type != 'tag'
      run: |
        jq \
          --arg url "$STABLE_DOCS_URL" \
          '.nav_links = [{"title":"Go to stable","url":$url}] + .nav_links' \
          _data.json > _data.json.tmp
        mv _data.json.tmp _data.json
      env:
        STABLE_DOCS_URL: ${{ vars.STABLE_DOCS_URL }}
      working-directory: ${{ github.workspace }}/docs/
    - run: |
        set -ex
        jq \
          --arg domain "$PLAUSIBLE_DOMAIN" \
          '.plausible_domain = $domain' \
          _data.json > _data.json.tmp
        mv _data.json.tmp _data.json
      env:
        PLAUSIBLE_DOMAIN: ${{ secrets.PLAUSIBLE_DOMAIN }}
      working-directory: ${{ github.workspace }}/docs/
    - run: deno task lume
      working-directory: ${{ github.workspace }}/docs/
    - uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_site
    - id: deployment
      if: github.event_name == 'push' && github.ref_type == 'tag'
      uses: actions/deploy-pages@v4
    - if: github.event_name == 'pull_request' || github.ref_type == 'branch'
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: docs/_site
        production-branch: main
        github-token: ${{ github.token }}
        enable-pull-request-comment: false
        enable-commit-comment: false
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 1
